#!/bin/sh
# This script was originally sourced from reddit. You can find it here:
# http://www.reddit.com/r/Minecraft/comments/drfx8/hey_linux_minecraft_server_admins_dae_use_a_fifo/
#
# Many thanks to hardG

MINECRAFT_JAR="/opt/mcserver/minecraft_server.jar"
PID_FILE="/opt/mcserver/server.pid"
SERVER_LOG="/opt/mcserver/server.log"

RUN_AS_USER="mcserver"

CONSOLE_IN="/opt/mcserver/console.in"

WATCH_INTERVAL=1
WATCH_TIMEOUT=60

JAVA_BIN=`which java`
JAVA_MEM_START=256M
JAVA_MEM_MAX=512M

wait_for_text() {
  PARENT=$$
  complete=0
  started=`date +%s`
  tail -n 0 -f $SERVER_LOG |
  while [ $complete -eq 0 ];
  do
    read X
    if [ "$X" != "" ]; then
      echo $X | grep "$1" > /dev/null
      if [ $? -eq 0 ]; then
         complete=1
         pkill -P "$PARENT" -xf "tail -n 0 -f $SERVER_LOG"
         break
      fi
    else
      sleep $WATCH_INTERVAL
    fi

    waited=$(( `date +%s` - started ))
    if [ $waited -ge $WATCH_TIMEOUT ]; then
      echo " $WATCH_TIMEOUT sec timeout reached"
    fi
  done
}

check_pid_file() {
  ps -p `cat $1` > /dev/null 2>&1
  echo $?
}

verify_fifo_input() {
  if [ ! -p $CONSOLE_IN ]; then
    echo " can not find $CONSOLE_IN for console input. create with mkfifo"
    exit 1
  fi
}

start() {
  echo -n "Starting Minecraft Server..."
  if [ -e $PID_FILE ];  then
     echo " $PID_FILE exists. Already running?"
     exit 1
  fi

  verify_fifo_input

  su $RUN_AS_USER -c "cat /dev/null > $SERVER_LOG"
  su $RUN_AS_USER -c "tail -f $CONSOLE_IN | \
    $JAVA_BIN -Xms${JAVA_MEM_START} -Xmx${JAVA_MEM_MAX} \
    -jar $MINECRAFT_JAR nogui > /dev/null 2>&1  & echo \$! > $PID_FILE"

  wait_for_text "Done"
  echo " Done."
}

stop() {
  echo -n "Stopping Minecraft Server..."

  if [ ! -e $PID_FILE ];  then
    echo " Unable to locate $PID_FILE"
    exit 1
  fi

  if [ `check_pid_file $PID_FILE` -ne 0 ];  then
    echo " Unable to locate PID `cat $PID_FILE`"
    exit 1
  fi

  verify_fifo_input
  echo "stop" > $CONSOLE_IN

  while [ `check_pid_file $PID_FILE` -eq 0 ]; do
    echo -n "."
    sleep $WATCH_INTERVAL
  done

  rm $PID_FILE
  kill `pgrep -f "tail -f $CONSOLE_IN"`

  echo " Done."
}


case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "usage: $0 {start|stop|restart}"
    ;;
esac

exit 0

